// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeCompany.DAL.Context;

#nullable disable

namespace TradeCompany.DAL.Migrations
{
    [DbContext(typeof(CompanyDbContext))]
    [Migration("20231205182552_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TradeCompany.Domain.Model.AccountingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountingUnits");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.HeadPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeadPersons");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeadPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Inn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HeadPersonId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountingUnitId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("GroupId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Right", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("D")
                        .HasColumnType("bit");

                    b.Property<bool>("E")
                        .HasColumnType("bit");

                    b.Property<int?>("Form")
                        .HasColumnType("int");

                    b.Property<bool>("R")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("W")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.SoldProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoreId");

                    b.ToTable("SoldProducts");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ShelfLife")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Structure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DLLName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentStructureId")
                        .HasColumnType("int");

                    b.Property<string>("function")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentStructureId");

                    b.ToTable("Structures");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Invoice", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.Partner", "Partner")
                        .WithMany("Invoices")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Order", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.Partner", "Partner")
                        .WithMany("Orders")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Partner", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.Bank", "Bank")
                        .WithMany("Partners")
                        .HasForeignKey("BankId");

                    b.HasOne("TradeCompany.Domain.Model.Country", "Country")
                        .WithMany("Partners")
                        .HasForeignKey("CountryId");

                    b.HasOne("TradeCompany.Domain.Model.HeadPerson", "HeadPerson")
                        .WithMany("Partners")
                        .HasForeignKey("HeadPersonId");

                    b.Navigation("Bank");

                    b.Navigation("Country");

                    b.Navigation("HeadPerson");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Product", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.AccountingUnit", "AccountingUnit")
                        .WithMany("Products")
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("TradeCompany.Domain.Model.Group", "Group")
                        .WithMany("Products")
                        .HasForeignKey("GroupId");

                    b.HasOne("TradeCompany.Domain.Model.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId");

                    b.Navigation("AccountingUnit");

                    b.Navigation("Group");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Right", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.User", "User")
                        .WithMany("Rights")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.SoldProduct", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.Order", "Order")
                        .WithMany("SoldProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TradeCompany.Domain.Model.Store", "Store")
                        .WithMany("SoldProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Store", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.Invoice", "Invoice")
                        .WithMany("Stores")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("TradeCompany.Domain.Model.Product", "Product")
                        .WithMany("Stores")
                        .HasForeignKey("ProductId");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Structure", b =>
                {
                    b.HasOne("TradeCompany.Domain.Model.Structure", "ParentStructure")
                        .WithMany()
                        .HasForeignKey("ParentStructureId");

                    b.Navigation("ParentStructure");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.AccountingUnit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Bank", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Country", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Group", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.HeadPerson", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Invoice", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Order", b =>
                {
                    b.Navigation("SoldProducts");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Partner", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Product", b =>
                {
                    b.Navigation("Stores");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.Store", b =>
                {
                    b.Navigation("SoldProducts");
                });

            modelBuilder.Entity("TradeCompany.Domain.Model.User", b =>
                {
                    b.Navigation("Rights");
                });
#pragma warning restore 612, 618
        }
    }
}
